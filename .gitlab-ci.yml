stages:
  - build
  - test
  - cron

mirror_from_github:
  stage: cron
  tags:
    - docker
  only:
    - schedules
  before_script:
    - apt update -qq && apt install -y -qq git
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
# create dedicated directory to clone as we may have gitlab cache (via docker volumes)
    - rm -rf /tmp/qgis
    - mkdir -p /tmp/
    - cd /tmp/
    - git clone "https://gitlab-ci-token:${GIT_TOKEN}@git.oslandia.net/Oslandia/Oslandia-3d/qgis.git"
    - cd qgis
  script:
# MASTER
    - git branch
    - git remote -v
    - git remote add upstream "https://github.com/qgis/QGIS.git"
    - git fetch upstream master
    - git checkout -b github_master upstream/master
    - git push -f "https://gitlab-ci-token:${GIT_TOKEN}@git.oslandia.net/Oslandia/Oslandia-3d/qgis.git" HEAD:master
# DEVELOP
    - git fetch origin
    - git checkout -b develop origin/develop
    - git rebase origin/master
    - git push -f "https://gitlab-ci-token:${GIT_TOKEN}@git.oslandia.net/Oslandia/Oslandia-3d/qgis.git" develop
# remove dedicated directory
after_script:
    - rm -rf /tmp/qgis

build_full:
  stage: build
  tags:
    - docker
  only:
    - merge_requests
  before_script:
    - apt update -qq
    - apt install -y -qq bison build-essential ca-certificates ccache cmake cmake-curses-gui dh-python doxygen expect flex flip gdal-bin git graphviz grass-dev libexiv2-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev libgsl-dev libpdal-dev libpq-dev libproj-dev libprotobuf-dev libqca-qt5-2-dev libqca-qt5-2-plugins libqscintilla2-qt5-dev libqt5opengl5-dev libqt5serialport5-dev libqt5sql5-sqlite libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libqwt-qt5-dev libspatialindex-dev libspatialite-dev libsqlite3-dev libsqlite3-mod-spatialite libyaml-tiny-perl libzip-dev libzstd-dev lighttpd locales ninja-build ocl-icd-opencl-dev opencl-headers pandoc pdal pkg-config poppler-utils protobuf-compiler pyqt5-dev pyqt5-dev-tools pyqt5.qsci-dev python3-all-dev python3-autopep8 python3-dev python3-gdal python3-jinja2 python3-lxml python3-mock python3-nose2 python3-owslib python3-plotly python3-psycopg2 python3-pygments python3-pyproj python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtmultimedia python3-pyqt5.qtpositioning python3-pyqt5.qtsql python3-pyqt5.qtsvg python3-pyqt5.qtwebkit python3-sip python3-sip-dev python3-termcolor python3-yaml qt3d-assimpsceneimport-plugin qt3d-defaultgeometryloader-plugin qt3d-gltfsceneio-plugin qt3d-scene2d-plugin qt3d5-dev qt5keychain-dev qtbase5-dev qtbase5-private-dev qtmultimedia5-dev qtpositioning5-dev qttools5-dev qttools5-dev-tools spawn-fcgi xauth xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb
  script:
    - mkdir build && cd build
    #  -DCMAKE_BUILD_TYPE=Debug
    - LC_ALL=C cmake ../ -GNinja -DWITH_3D=ON -DWITH_QUICK=ON -DSUPPRESS_QT_WARNINGS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DUSE_CCACHE=ON -DWITH_ORACLE=OFF -DWITH_SERVER=TRUE -DENABLE_PGTEST=FALSE -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCOMPILE_OPTIONS="-Wall;-Werror"
    - ninja

test_full:
  stage: build
  tags:
    - docker
  only:
    - merge_requests
  dependencies:
    - build_full
  script:
    - cd build
    - ctest
